esphome:
  name: tubby
  name_add_mac_suffix: true
  libraries:
    - tflm_esp32
  includes:
    - light_sleep.h

esp32:
  board: um_feathers2
  framework:
    type: arduino   

packages:
  wifi: !include wifi.yaml
# Enable logging
logger:
    level: INFO
api:
  password: ""  
ota:
  password: ""

# Sensor settling time from Power On
custom_component:
- lambda: |-
    //auto me  = new LightSleep(3000000); //3 seconds
    auto me  = new LightSleep(900000000); //15 minutes
    return {me};
  components:
  - id: custom_id  

deep_sleep:
  id: deep_sleep_1
  sleep_duration: 2s

  

# Enable Home Assistant API
binary_sensor:
  - platform: homeassistant
    name: "OTA state from Home Assistant"
    entity_id: input_boolean.ota
    publish_initial_state: true
    id: ota_1
    on_state:
        - if:
              condition:
                lambda: 'return !x;'
              then:
                - delay: 6s # allow sensors to report state          
                - deep_sleep.enter:
                   id: deep_sleep_1
        
button:
  - platform: restart
    name: "Restart"
    id: esphomerestart
    
number:
  - platform: template
    entity_category: "diagnostic"  
    name: "ORP Cal"
    min_value: 0
    max_value: 3300
    step: 1
    optimistic: true
    initial_value: 21
    restore_value: true
    id: "orp_offset"
  - platform: template
    entity_category: "diagnostic"  
    name: "pH 4 Cal"
    min_value: 0
    max_value: 3300
    step: 1
    optimistic: true
    initial_value: 1906
    restore_value: true
    id: "ph_4"
  - platform: template
    entity_category: "diagnostic"  
    name: "pH 7 Cal"
    min_value: 0
    max_value: 3300
    step: 1
    optimistic: true
    initial_value: 1385
    restore_value: true
    id: "ph_7"
  - platform: template
    entity_category: "diagnostic"  
    name: "pH 10 Cal"
    min_value: 0
    max_value: 3300
    step: 1
    optimistic: true
    initial_value: 910
    restore_value: true
    id: "ph_10"
  - platform: template
    entity_category: "diagnostic"  
    name: "ppm Factor"
    min_value: 1
    max_value: 3
    step: 0.01
    optimistic: true
    initial_value: 1
    restore_value: true
    id: "ppm_factor"

sensor:
  - platform: adc
    pin: 1
    name: "ORP"
    force_update: true
    update_interval: 0.1s  
    entity_category: "diagnostic"
    device_class: "voltage"
    attenuation: 11db    
    unit_of_measurement: "mV"    
    id: "orp"
    accuracy_decimals: 0
    filters:
        - median:
            window_size: 19
            send_every: 19
            send_first_at: 19
        - lambda: |
                return (x * 1000 - 1500) + id(orp_offset).state;
  
  - platform: adc
    pin: 3
    name: "pH Raw"    
    force_update: true
    update_interval: 0.1s
    entity_category: "diagnostic"
    device_class: "voltage"
    attenuation: 11db
    unit_of_measurement: "mV"
    id: "ph_raw"
    accuracy_decimals: 0
    filters:
        - median:
            window_size: 19
            send_every: 19
            send_first_at: 19
        - lambda: return x * 1000;     
  
  - platform: adc
    pin: 7
    name: "Battery"
    device_class: "battery"
    entity_category: "diagnostic"
    force_update: true
    update_interval: 0.1s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    attenuation: 11db       
    filters:
        - median:
            window_size: 19
            send_every: 19
            send_first_at: 19 
        - calibrate_linear:
            - 1.5 ->  0
            - 2.1 -> 100  
        - lambda: |
            if (x < 0) return 0;
            else if (x > 100) return 100;
            else return (x);         
  
  - platform: template
    name: pH
    force_update: true
    device_class: "ph"
    lambda: |
        auto PH_MID_CAL = id(ph_7).state;
        auto PH_LOW_CAL = id(ph_4).state;
        auto PH_HIGH_CAL = id(ph_10).state; 
        if (id(ph_raw).state > PH_MID_CAL) return 7.0 - 3.0 / (PH_LOW_CAL - PH_MID_CAL) *  (id(ph_raw).state - PH_MID_CAL);
        else                        return 7.0 - 3.0 / (PH_MID_CAL - PH_HIGH_CAL) * (id(ph_raw).state - PH_MID_CAL);
    unit_of_measurement: pH
    icon: "mdi:ph"
    id: "ph"
    update_interval: 2s    
    accuracy_decimals: 2

  - platform: template
    name: Sanitizer
    id: "ppm"
    force_update: true
    lambda: |
      auto ppm = static_cast <LightSleep *> (id(custom_id))->predict_ppm(id(orp).state, id(ph).state);
      return ppm * id(ppm_factor).state;
      
    unit_of_measurement: ppm
    icon: "mdi:test-tube"
    update_interval: 2s
    accuracy_decimals: 2

